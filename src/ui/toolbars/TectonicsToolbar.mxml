<?xml version="1.0"?>
<t:Toolbar xmlns:fx="http://ns.adobe.com/mxml/2009"
           xmlns:s="library://ns.adobe.com/flex/spark"
           xmlns:c="ui.parts.components.*"
           creationComplete="onCreationComplete(event)"
           xmlns:t="ui.toolbars.*">

    <fx:Script><![CDATA[
        import events.PayloadEvent;

        import global.Icons;
        import global.Local;

        import logic.graph.Cell;
        import logic.modules.TectonicPlate;
        import logic.modules.TectonicsModule;

        import mx.events.CollectionEvent;
        import mx.events.FlexEvent;

        import ui.PopupManager;
        import ui.parts.skins.PanelSkinOutline;
        import ui.popups.BusyPopup;
        import ui.popups.ConfirmPopup;

        private var mousePoint:Point;

        override public function onCreationComplete(event:FlexEvent):void
        {
            super.onCreationComplete(event);

            listPlates.dataProvider = model.tectonicPlates;

            if (model.tectonicPlates.length == 0)
                onGeneratePlates(null);

            sliderJitter.label.text = Local.text('jitter');
            sliderJitter.slider.minimum = 0;
            sliderJitter.slider.maximum = 1;
            sliderJitter.slider.stepSize = .1;
            sliderJitter.slider.snapInterval = .1;
            sliderJitter.value = model.tectonicJitter;

            updateTectonicPlatesCount();
        }

        private function updateTectonicPlatesCount():void
        {
            labelPlateCount.text = Local.text('plate_count', [model.tectonicPlates.length]);
        }

        override protected function addEventListeners():void
        {
            model.tectonicPlates.addEventListener(CollectionEvent.COLLECTION_CHANGE, onTectonicPlatesChanged);

            sliderJitter.addEventListener(Event.CHANGE, onChangeJitter);

            signal.addEventListener(PayloadEvent.PICK_CELL_START, onPickCellStart);
            signal.addEventListener(PayloadEvent.PICK_CELL_END, onPickCellEnd);
            signal.addEventListener(PayloadEvent.MAP_MOUSE_MOVE, onMouseMoveAnywhere);
        }

        override protected function removeEventListeners():void
        {
            model.tectonicPlates.removeEventListener(CollectionEvent.COLLECTION_CHANGE, onTectonicPlatesChanged);

            sliderJitter.removeEventListener(Event.CHANGE, onChangeJitter);

            signal.removeEventListener(PayloadEvent.PICK_CELL_START, onPickCellStart);
            signal.removeEventListener(PayloadEvent.PICK_CELL_END, onPickCellEnd);
            signal.removeEventListener(PayloadEvent.MAP_MOUSE_MOVE, onMouseMoveAnywhere);
        }

        private function onMouseMoveAnywhere(event:PayloadEvent):void
        {
            mousePoint = event.payload;

            if (model.isPickingCell)
            {
                mousePoint = model.getClosestPoint(mousePoint);

                if (!mousePoint)
                {
                    labelNearestCell.text = Local.text('no_cell');
                    return;
                }
                var cell:Cell = model.getCellByPoint(mousePoint);
                labelNearestCell.text = Local.text('pick_cell', [cell.index]);
            }
        }

        private function onPickCellStart(event:PayloadEvent):void
        {
            groupContent.visible = groupContent.includeInLayout = false;
            groupPickingCell.visible = groupPickingCell.includeInLayout = true;

            if (!mousePoint)
                return;

            groupPickingCell.visible = true;
            mousePoint = model.getClosestPoint(mousePoint);
            if (!mousePoint)
                return;

            var cell:Cell = model.getCellByPoint(mousePoint);
            labelNearestCell.text = Local.text('pick_cell', [cell.index]);
        }

        private function onPickCellEnd(event:PayloadEvent):void
        {
            groupContent.visible = groupContent.includeInLayout = true;
            groupPickingCell.visible = groupPickingCell.includeInLayout = false;
        }

        private function onEndPickCell(event:MouseEvent):void
        {
            model.isPickingCell = false;
            signal.dispatchEvent(new PayloadEvent(PayloadEvent.PICK_CELL_END));
        }

        private function onChangeJitter(event:Event):void
        {
            model.tectonicJitter = sliderJitter.value;
            model.invalidate();
        }

        private function onTectonicPlatesChanged(event:CollectionEvent):void
        {
            updateTectonicPlatesCount();

            signal.dispatchEvent(new PayloadEvent(PayloadEvent.CHANGE_TECTONICS, event));
            model.invalidate();
        }

        private function onAddPlate(event:MouseEvent):void
        {
            TectonicsModule.addPlate();
        }

        private function onGeneratePlates(event:MouseEvent):void
        {
            var p:ConfirmPopup = new ConfirmPopup();
            p.header = Local.text('tectonics_generate_plates');
            p.description = Local.text('tectonics_generate_plates_text');
            p.callbackConfirm = autoGenerate;
            PopupManager.open(p);
        }


        private function autoGenerate():void
        {
            var p:BusyPopup = new BusyPopup();
            p.text = Local.text('generating_plates');
            p.calculation = function ():void
            {
                checkBoxToggleDeepPlates.selected = true;
                model.tectonicPlates.filterFunction = null;
                model.tectonicPlates.refresh();
                TectonicsModule.generatePlates();
                task.resetLayers();
            };
            PopupManager.open(p);
        }

        private function onToggleDeepPlates(event:MouseEvent):void
        {
            model.tectonicPlates.filterFunction = checkBoxToggleDeepPlates.selected ? null : filterByTypeIsNotDeep;
            model.tectonicPlates.refresh();
        }

        private function filterByTypeIsNotDeep(plate:TectonicPlate):Boolean
        {
            return plate.type != TectonicPlate.DEEP;
        }
        ]]>
    </fx:Script>

    <s:HGroup width="100%"
              verticalAlign="middle">

        <s:Label id="labelTaskNumber"
                 toolTip="{Local.text('task_progress')}"/>

        <s:Label id="labelTaskName"
                 showTruncationTip="true"
                 width="100%"/>

        <s:Button toolTip="{Local.text('all_tasks')}"
                  skinClass="ui.parts.skins.ButtonSkinIcon"
                  icon="{Icons.Tasks}"
                  click="onAllTasks(event)"/>

    </s:HGroup>

    <s:Group width="100%"
             height="100%">
        <s:VGroup id="groupContent"
                  width="100%"
                  height="100%"
                  gap="10">
            <s:Label text="{Local.text('task_tectonics_text')}"
                     width="100%"/>
            <s:Button label="{Local.text('generate_plates')}"
                      icon="{Icons.Magic}"
                      width="100%"
                      click="onGeneratePlates(event)"/>
            <s:Panel skinClass="ui.parts.skins.PanelSkinOutline"
                     width="100%">
                <c:SliderWithInput id="sliderJitter"
                                   width="100%"/>
            </s:Panel>
            <s:Button label="{Local.text('add_tectonic_plate')}"
                      icon="{Icons.Add}"
                      width="100%"
                      click="onAddPlate(event)"/>
            <s:HGroup width="100%"
                      verticalAlign="middle">
                <s:CheckBox id="checkBoxToggleDeepPlates"
                            label="{Local.text('show_deep_plates')}"
                            click="onToggleDeepPlates(event)"
                            selected="true"/>
                <s:Label id="labelPlateCount"
                         width="100%"
                         textAlign="right"/>
            </s:HGroup>
            <s:List id="listPlates"
                    useVirtualLayout="false"
                    width="100%"
                    height="100%"
                    contentBackgroundAlpha="0"
                    borderVisible="false"
                    horizontalScrollPolicy="off"
                    preventSelection="true"
                    itemRenderer="ui.parts.itemRenderers.ItemRendererTectonicPlate">
                <s:layout>
                    <s:VerticalLayout gap="5"/>
                </s:layout>
            </s:List>
        </s:VGroup>
        <s:VGroup id="groupPickingCell"
                  visible="false"
                  includeInLayout="false"
                  horizontalAlign="center"
                  verticalAlign="middle"
                  width="100%"
                  height="100%">
            <s:Label id="labelNearestCell"/>
            <s:Button label="{Local.text('cancel')}"
                      icon="{Icons.Multiply}"
                      click="onEndPickCell(event)"/>
        </s:VGroup>
    </s:Group>
</t:Toolbar>

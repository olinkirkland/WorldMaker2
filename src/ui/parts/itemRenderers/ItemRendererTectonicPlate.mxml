<?xml version="1.0"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:c="ui.parts.components.*"
                width="100%"
                autoDrawBackground="false"
                creationComplete="onCreationComplete(event)">

    <fx:Script><![CDATA[
        import global.Color;
        import global.Icons;
        import global.Local;

        import logic.Model;
        import logic.modules.TectonicPlate;
        import logic.modules.TectonicsModule;

        import mx.collections.ArrayCollection;
        import mx.events.FlexEvent;

        import spark.events.IndexChangeEvent;

        import ui.PopupManager;
        import ui.popups.ConfirmPopup;

        public var plate:TectonicPlate;

        private function onCreationComplete(event:FlexEvent):void
        {
            buttonBarStrength.dataProvider = new ArrayCollection([
                {strength: 0.8, label: Local.text('small')},
                {strength: 1.2, label: Local.text('medium')},
                {strength: 1.6, label: Local.text('big')}
            ]);
            buttonBarStrength.addEventListener(IndexChangeEvent.CHANGE, onChangeStrength, false, 0, true);

            directionPicker.addEventListener(MouseEvent.CLICK, onChangeDirection);

            for each (var u:Object in buttonBarStrength.dataProvider)
                if (u.value == plate.strength)
                    buttonBarStrength.selectedItem = u;

            picker.addEventListener(Event.CHANGE, onChangeCell, false, 0, true);

            validateToggleIcon();
        }

        override public function set data(value:Object):void
        {
            if (!value)
                return;

            plate = TectonicPlate(value);
            picker.cell = plate.origin;
            groupCaution.visible = groupCaution.includeInLayout = !plate.origin;
            solidColor.color = plate.color;
            labelId.text = plate.id.substr(0, 4);
            labelId.setStyle('color', plate.color);

            for each (var u:Object in buttonBarStrength.dataProvider)
                if (u.strength == plate.strength)
                    buttonBarStrength.selectedItem = u;
        }

        private function onChangeCell(event:Event):void
        {
            plate.origin = picker.cell;
            Model.instance.tectonicPlates.itemUpdated(plate);
        }

        private function onClickRemove(event:MouseEvent):void
        {
            var p:ConfirmPopup = new ConfirmPopup();
            p.callbackConfirm = removePlate;
            p.header = Local.text('remove_plate');
            p.description = Local.text('are_you_sure');
            p.textConfirm = Local.text('yes_im_sure');
            p.textCancel = Local.text('cancel');
            PopupManager.open(p);
        }

        private function onClickColor(event:MouseEvent):void
        {
            plate.color = Color.stringToLightColor("" + Math.random() * 999);
            Model.instance.tectonicPlates.itemUpdated(plate);
        }

        private function removePlate():void
        {
            TectonicsModule.removePlate(plate);
        }

        private function onChangeStrength(event:IndexChangeEvent):void
        {
            plate.strength = buttonBarStrength.selectedItem.value;
            trace(buttonBarStrength.selectedItem.value);
            Model.instance.tectonicPlates.itemUpdated(plate);
        }

        private function onChangeDirection(event:Event):void
        {

        }

        private function onToggle(event:MouseEvent):void
        {
            // Toggles collapsed/uncollapsed state
            groupAdvanced.visible = groupAdvanced.includeInLayout = !groupAdvanced.visible;
            validateToggleIcon();
        }

        private function validateToggleIcon():void
        {
            buttonToggle.setStyle("icon", groupAdvanced.visible ? Icons.ChevronUp : Icons.ChevronDown);
        }
        ]]>
    </fx:Script>

    <s:Group width="100%">

        <s:Rect width="100%"
                height="100%"
                radiusX="5"
                radiusY="5">
            <s:fill>
                <s:SolidColor color="{Color.fillMedium}"/>
            </s:fill>
        </s:Rect>

        <s:VGroup width="100%"
                  padding="10">

            <s:Rect width="100%"
                    height="8">
                <s:fill>
                    <s:SolidColor id="solidColor"/>
                </s:fill>
            </s:Rect>

            <s:VGroup width="100%"
                      padding="5">
                <s:HGroup width="100%"
                          verticalAlign="middle">
                    <s:VGroup id="groupCaution"
                              toolTip="needs_cell">
                        <c:ColorBitmapImage source="{Icons.Error}"
                                            color="{Color.theme}"/>
                    </s:VGroup>

                    <s:Label id="labelId"/>

                    <c:CellPicker id="picker"
                                  width="100%"/>

                    <s:Button id="buttonToggle"
                              click="onToggle(event)"
                              skinClass="ui.parts.skins.ButtonSkinIcon"/>
                </s:HGroup>

                <s:Panel id="groupAdvanced"
                         visible="false"
                         includeInLayout="false"
                         width="100%"
                         skinClass="ui.parts.skins.PanelSkinOutline">

                    <s:VGroup width="100%">

                        <s:ButtonBar id="buttonBarStrength"
                                     width="100%"
                                     requireSelection="true"/>

                        <s:Button icon="{Icons.Brush}"
                                  label="{Local.text('change_color')}"
                                  click="onClickColor(event)"
                                  width="100%"/>

                        <c:DirectionPicker id="directionPicker"
                                           width="100%"/>

                        <s:Button icon="{Icons.Delete}"
                                  label="{Local.text('remove')}"
                                  click="onClickRemove(event)"
                                  skinClass="ui.parts.skins.ButtonRedSkin"
                                  width="100%"/>

                    </s:VGroup>

                </s:Panel>

            </s:VGroup>

        </s:VGroup>

    </s:Group>

</s:ItemRenderer>

<?xml version="1.0"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:c="ui.parts.components.*"
                width="100%"
                autoDrawBackground="false"
                creationComplete="onCreationComplete(event)">

    <fx:Script><![CDATA[
        import global.Color;
        import global.Icons;
        import global.Local;

        import logic.Model;

        import logic.modules.TectonicPlate;
        import logic.modules.TectonicsModule;

        import mx.events.FlexEvent;

        import ui.PopupManager;
        import ui.popups.ConfirmPopup;

        public var plate:TectonicPlate;

        override public function set data(value:Object):void
        {

            if (!value)
                return;

            plate = TectonicPlate(value);
            picker.cell = plate.origin;
            solidColor.color = plate.color;
        }

        private function onClickRemove(event:MouseEvent):void
        {
            var p:ConfirmPopup = new ConfirmPopup();
            p.callbackConfirm = removePlate;
            p.header = Local.text('remove_plate');
            p.description = Local.text('are_you_sure');
            p.textConfirm = Local.text('yes_im_sure');
            p.textCancel = Local.text('cancel');
            PopupManager.open(p);
        }

        private function onClickColor(event:MouseEvent):void
        {
            plate.color = Color.stringToLightColor("" + Math.random() * 999);
            Model.instance.tectonicPlates.itemUpdated(plate);
        }

        private function removePlate():void
        {
            TectonicsModule.removePlate(plate);
        }

        private function onCreationComplete(event:FlexEvent):void
        {
            sliderStrength.label.text = Local.text('plate_strength');
            sliderStrength.slider.minimum = 1;
            sliderStrength.slider.maximum = 10;
            sliderStrength.slider.stepSize = 1;
            sliderStrength.slider.snapInterval = 1;
            sliderStrength.value = plate.strength;
            sliderStrength.addEventListener(Event.CHANGE, onChangeStrength, false, 0, true);

            validateToggleIcon();
        }

        private function onChangeStrength(event:Event):void
        {
            plate.strength = sliderStrength.value;
            Model.instance.tectonicPlates.itemUpdated(plate);
        }

        private function onToggle(event:MouseEvent):void
        {
            // Toggles collapsed/uncollapsed state
            groupAdvanced.visible = groupAdvanced.includeInLayout = !groupAdvanced.visible;
            validateToggleIcon();
        }

        private function validateToggleIcon():void
        {
            buttonToggle.setStyle("icon", groupAdvanced.visible ? Icons.ChevronUp : Icons.ChevronDown);
        }
        ]]>
    </fx:Script>

    <s:Group width="100%">

        <s:Rect width="100%"
                height="100%"
                radiusX="5"
                radiusY="5">
            <s:fill>
                <s:SolidColor color="{Color.fillMedium}"/>
            </s:fill>
        </s:Rect>

        <s:VGroup width="100%"
                  padding="10">

            <s:Rect width="100%"
                    height="8">
                <s:fill>
                    <s:SolidColor id="solidColor"/>
                </s:fill>
            </s:Rect>

            <s:VGroup width="100%"
                      padding="5">
                <s:HGroup width="100%"
                          verticalAlign="middle">
                    <c:CellPicker id="picker"/>
                    <s:Spacer width="100%"/>
                    <s:Button id="buttonToggle"
                              click="onToggle(event)"
                              skinClass="ui.parts.skins.ButtonSkinIcon"/>
                </s:HGroup>

                <s:Panel id="groupAdvanced"
                         visible="false"
                         includeInLayout="false"
                         width="100%"
                         skinClass="ui.parts.skins.PanelSkinOutline">

                    <s:VGroup width="100%"
                              padding="0">

                        <c:SliderWithInput id="sliderStrength"
                                           width="100%"/>

                        <s:Button icon="{Icons.Brush}"
                                  label="{Local.text('change_color')}"
                                  click="onClickColor(event)"/>

                        <s:Button icon="{Icons.Delete}"
                                  label="{Local.text('remove')}"
                                  click="onClickRemove(event)"/>

                    </s:VGroup>

                </s:Panel>

            </s:VGroup>

        </s:VGroup>

    </s:Group>

</s:ItemRenderer>
